#include "Histogram.h"

template<typename T> Histogram<T>::Historgram(const int NUM_HISTOS, const T MIN_VALUE, const T MAX_VALUE, const vector<T> &values) : NUM_HISTOS_(NUM_HISTOS), MIN_VALUE_(MIN_VALUE), MAX_VALUE_(MAX_VALUE), num_values(values.size(), histos_(vector<int>(NUM_HISTOS, 0)))
{
  for (vector<T>::const_iterator value_it = values.begin(); values_it != values.end(); value_it++)
    if (*value_it >= MIN_VALUE_ && *value_it <= MAX_VALUE)
      histos_[calcHistoIndex(*value_it)]++;
}

template<typename T> double Histogram<T>::getEntropy()
{
  double entropy = 0;
  for (vector<int>::const_iterator histo_it = histos_.begin(); histo_it != histos_.end(); histo_it++)
    entropy += -*histo_it / num_values * log(*histo_it / num_values);
  return entropy;
}

template<typename T> double Histogram<T>::getProbability(const T &value)
{
  if (value < MIN_VALUE_ || value > MAX_VALUE_)
    return 0;
  return histos_[calcHistoIndex(value)];
}

template<typename T> double Histogram<T>::calcHistoIndex(const T &value)
{
  return 1.0 * (value - MIN_VALUE_) / (MAX_VALUE_ - MIN_VALUE_) * NUM_HISTOS_;
